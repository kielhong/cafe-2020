plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id "io.freefair.lombok" version "5.1.1"
	id 'java'
	id 'java-library'
	id 'java-test-fixtures'
	id 'checkstyle'
	id 'jacoco'
}

group = 'com.widehouse'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
//	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
//	testImplementation 'io.projectreactor:reactor-test'
//	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testFixturesImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
	classpath = sourceSets.main.output.classesDirs + classpath
	useJUnitPlatform()
	outputs.dir snippetsDir
}

jacocoTestReport {
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
			        '**/*Application*'
			])
		})
	}

	dependsOn test
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}